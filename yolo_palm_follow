import rclpy, math
from rclpy.node import Node
from std_msgs.msg import Bool
from geometry_msgs.msg import Vector3
from sensor_msgs.msg import Image, CameraInfo
from cv_bridge import CvBridge
from ultralytics import YOLO
import numpy as np

class YoloPalmFollow(Node):
    def __init__(self):
        super().__init__('yolo_palm_follow')
        self.declare_parameter('model_path', '/home/hong/yolov8_trained_model/runs/detect/train/weights/best.pt')
        self.declare_parameter('target_class', 'hand1', 'hand2')   
        self.declare_parameter('conf_thres', 0.5)

        self.model = YOLO(self.get_parameter('model_path').value)
        self.target = self.get_parameter('target_class').value
        self.conf_thres = float(self.get_parameter('conf_thres').value)
        self.bridge = CvBridge()

        self.pub_active  = self.create_publisher(Bool, 'vision_active', 10)
        self.pub_target  = self.create_publisher(Vector3, 'vision_target', 10)

        self.create_subscription(Image, '/camera/color/image_raw', self.on_image, 10)
        self._cx, self._cy, self._fx = None, None, None  
        self.create_subscription(CameraInfo, '/camera/color/camera_info', self.on_cinfo, 10)

    def on_cinfo(self, msg: CameraInfo):
        if msg.k and len(msg.k)>=6:
            fx = msg.k[0]; cx = msg.k[2]; cy = msg.k[5]
            self._fx, self._cx, self._cy = fx, cx, cy

    def on_image(self, msg: Image):
        frame = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')
        h, w = frame.shape[:2]
        res = self.model.predict(frame, conf=self.conf_thres, verbose=False, imgsz=640)
        active = False
        vec = Vector3()
        if res and res[0].boxes is not None:
            names = res[0].names
            best = None; best_conf = -1
            for b in res[0].boxes:
                cls = names.get(int(b.cls.item()), '')
                conf = float(b.conf.item())
                if cls == self.target and conf > best_conf:
                    best = b; best_conf = conf
            if best is not None:
                x1,y1,x2,y2 = map(int, best.xyxy[0].tolist())
                cx = (x1+x2)/2.0
                if self._fx and self._cx:
                    heading = math.atan2((cx - self._cx), self._fx)
                else:
                    heading = ((cx - w/2.0) / (w/2.0)) * (math.radians(35)) 
                vec.x = heading       
                vec.y = 0.0            
                vec.z = best_conf
                active = True
        self.pub_active.publish(Bool(data=active))
        if active:
            self.pub_target.publish(vec)

def main():
    rclpy.init()
    rclpy.spin(YoloPalmFollow())
    rclpy.shutdown()

if __name__=='__main__':
    main()
